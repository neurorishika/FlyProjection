def setup():
    global ADJUSTED_TRAIL_COLOR, ADJUSTED_YING_CENTER, ADJUSTED_YANG_CENTER, ADJUSTED_YY_RADIUS, ADJUSTED_YING_WIDTH, ADJUSTED_YANG_WIDTH, ADJUSTED_A_CENTER, ADJUSTED_B_CENTER, ADJUSTED_AB_RADIUS, ADJUSTED_A_WIDTH, ADJUSTED_B_WIDTH, ADJUSTED_BACKGROUND_COLOR, ADJUSTED_BOUNDARY_COLOR, ADJUSTED_BOUNDARY_WIDTH, ADJUSTED_GAP_WIDTH, ADJUSTED_ORTHO_DIST, ADJUSTED_A_CENTER, ADJUSTED_B_CENTER

    ADJUSTED_TRAIL_COLOR = hex_to_rgb(TRAIL_COLOR) if type(TRAIL_COLOR) == str else TRAIL_COLOR if type(TRAIL_COLOR) == tuple else (255, 0, 0)
    
    ## YING-YANG PARAMETERS
    YING_CENTER = (TRAIL_CENTER[0], TRAIL_CENTER[1] - GAP_WIDTH/2)
    YANG_CENTER = (TRAIL_CENTER[0], TRAIL_CENTER[1] + GAP_WIDTH/2)
    ADJUSTED_YING_CENTER = relative_to_absolute(YING_CENTER[0], YING_CENTER[1], rig_config)
    ADJUSTED_YANG_CENTER = relative_to_absolute(YANG_CENTER[0], YANG_CENTER[1], rig_config)
    ADJUSTED_YY_RADIUS = int(YY_RADIUS * SCALE_FACTOR)
    ADJUSTED_YING_WIDTH = int(YING_WIDTH * SCALE_FACTOR)
    ADJUSTED_YANG_WIDTH = int(YANG_WIDTH * SCALE_FACTOR)
    
    # orthogonal distance between A and B centers
    ORTHO_DIST = int(np.sqrt(2*AB_RADIUS**2)*SCALE_FACTOR)
    A_CENTER = (TRAIL_CENTER[0], TRAIL_CENTER[1])
    B_CENTER = (TRAIL_CENTER[0], TRAIL_CENTER[1])
    ADJUSTED_A_CENTER = relative_to_absolute(A_CENTER[0], A_CENTER[1], rig_config)
    ADJUSTED_A_CENTER = (ADJUSTED_A_CENTER[0] - ORTHO_DIST/2, ADJUSTED_A_CENTER[1])
    ADJUSTED_B_CENTER = relative_to_absolute(B_CENTER[0], B_CENTER[1], rig_config)
    ADJUSTED_B_CENTER = (ADJUSTED_B_CENTER[0] + ORTHO_DIST/2, ADJUSTED_B_CENTER[1])
    ADJUSTED_AB_RADIUS = int(AB_RADIUS * SCALE_FACTOR)
    ADJUSTED_A_WIDTH = int(A_WIDTH * SCALE_FACTOR)
    ADJUSTED_B_WIDTH = int(B_WIDTH * SCALE_FACTOR)
    print("Setup complete.")

def constants():
    return

def updates():
    global running, elapsed_time
    # draw a circular trail
    if elapsed_time < PRE_PERIOD_DURATION:
        pass
    elif elapsed_time < PRE_PERIOD_DURATION+YY_DURATION:
        # DRAW YING ARCS
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YING_CENTER[0] - ADJUSTED_YY_RADIUS, ADJUSTED_YING_CENTER[1] - ADJUSTED_YY_RADIUS, 2*ADJUSTED_YY_RADIUS, 2*ADJUSTED_YY_RADIUS),
            0, np.pi, ADJUSTED_YING_WIDTH
        )
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YING_CENTER[0] - ADJUSTED_YY_RADIUS, ADJUSTED_YING_CENTER[1] - ADJUSTED_YY_RADIUS/2, ADJUSTED_YY_RADIUS+ADJUSTED_YING_WIDTH/2, ADJUSTED_YY_RADIUS),
            0,np.pi, ADJUSTED_YING_WIDTH
        )
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YING_CENTER[0]-ADJUSTED_YING_WIDTH/2, ADJUSTED_YING_CENTER[1] - ADJUSTED_YY_RADIUS/2, ADJUSTED_YY_RADIUS+ADJUSTED_YING_WIDTH/2, ADJUSTED_YY_RADIUS),
            np.pi, 2*np.pi, ADJUSTED_YING_WIDTH
        )
        # DRAW YANG ARCS
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YANG_CENTER[0] - ADJUSTED_YY_RADIUS, ADJUSTED_YANG_CENTER[1] - ADJUSTED_YY_RADIUS, 2*ADJUSTED_YY_RADIUS, 2*ADJUSTED_YY_RADIUS),
            np.pi, 2*np.pi, ADJUSTED_YANG_WIDTH
        )
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YANG_CENTER[0] - ADJUSTED_YY_RADIUS, ADJUSTED_YANG_CENTER[1] - ADJUSTED_YY_RADIUS/2, ADJUSTED_YY_RADIUS + ADJUSTED_YANG_WIDTH/2, ADJUSTED_YY_RADIUS),
            0, np.pi, ADJUSTED_YANG_WIDTH
        )
        pygame.draw.arc(
            screen, 
            ADJUSTED_TRAIL_COLOR, 
            (ADJUSTED_YANG_CENTER[0] - ADJUSTED_YANG_WIDTH/2, ADJUSTED_YANG_CENTER[1] - ADJUSTED_YY_RADIUS/2, ADJUSTED_YY_RADIUS + ADJUSTED_YANG_WIDTH/2, ADJUSTED_YY_RADIUS),
            np.pi, 2*np.pi, ADJUSTED_YANG_WIDTH
        )
    elif elapsed_time < PRE_PERIOD_DURATION+YY_DURATION+AB_DURATION:
        # DRAW A CIRCLE
        pygame.draw.circle(screen, ADJUSTED_TRAIL_COLOR, ADJUSTED_A_CENTER, ADJUSTED_AB_RADIUS, ADJUSTED_A_WIDTH)
        # DRAW B CIRCLE
        pygame.draw.circle(screen, ADJUSTED_TRAIL_COLOR, ADJUSTED_B_CENTER, ADJUSTED_AB_RADIUS, ADJUSTED_B_WIDTH)
    else:
        running = False
    return